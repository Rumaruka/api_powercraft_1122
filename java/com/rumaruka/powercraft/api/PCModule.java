package com.rumaruka.powercraft.api;

import com.rumaruka.powercraft.api.PCResourceReloadListener.IResourceReloadLisener;
import com.rumaruka.powercraft.api.version.PCVersion;
import net.minecraft.item.ItemStack;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.fml.common.Loader;
import net.minecraftforge.fml.common.ModContainer;
import net.minecraftforge.fml.common.ModMetadata;

import java.io.File;
import java.util.Arrays;

public abstract  class PCModule implements IResourceReloadLisener {
    public static final String POWERCRAFT = "powercraft";
    public static final String POWERCRAFT_LOGOFILE = "/powercraft/PowerCraft.png";
    public static final String[] POWERCRAFT_AUTHORS = { "XOR", "Rapus95", "Buggi", "zcraftler","Rumaruka"};
    public static final String POWERCRAFT_CREDITS = "MightyPork, RxD, LOLerul2";

    private final PCCreativeTab creativeTab;
    private final ModContainer mod;
    private final Configuration config;
    private final PCVersion version;

    public PCModule() throws IllegalAccessException {
        PCModules.addModules(this);
        this.creativeTab = new PCCreativeTab(Loader.instance().activeModContainer().getName(), this);
        this.mod = PCUtils.getActiveMod();
        ModMetadata metadata = getMetadata();
        metadata.autogenerated = false;

        metadata.logoFile = POWERCRAFT_LOGOFILE;
        metadata.description = PCLangHelper.translate("desk."+this.mod.getName());
        metadata.authorList = Arrays.asList(POWERCRAFT_AUTHORS);
        metadata.credits = POWERCRAFT_CREDITS;
        if (PCApi.instance != null)
            PCApi.instance.getMetadata().childMods.add(PCUtils.getActiveMod());
        this.config = new Configuration(new File(Loader.instance().getConfigDir(), this.mod.getName()
                + ".cfg"));
        this.config.load();
        PCVersion v;
        try{
            v = PCVersion.pharse(this.mod.getVersion());
        }catch(Exception e){
            PCLogger.severe("Error while pharsing version %s of %s", metadata.version, metadata.name);
            v = new PCVersion("error", 0);
        }
        this.version = v;
        moduleBootstrap();
        PCResourceReloadListener.registerResourceReloadListener(this);
        PCExtractor.extract(this.mod.getSource());
    }

    protected void moduleBootstrap() {
        //
    }

    /**
     * save the config into the config file
     */
    public void saveConfig() {
        this.config.save();
    }

    /**
     * get the config
     * @return the config
     */
    public Configuration getConfig() {
        return this.config;
    }

    /**
     * get the {@link ModContainer} for this module
     *
     * @return the modContainer or null if none
     */
    public ModContainer getContainer() {
        return this.mod;
    }

    /**
     * get the mod metadata
     *
     * @return the metadata
     */
    public ModMetadata getMetadata() {
        return this.mod.getMetadata();
    }

    /**
     * the module name, same as @Mod(name=xxx)
     * @return
     */
    public String getName() {
        return getContainer().getName();
    }

    /**
     * the module modid, same as @Mod(modid=xxx)
     * @return
     */
    public String getModId() {
        return getContainer().getModId();
    }

    /**
     * the itemstack that should be displayed in the creative tab button
     * @return the itemstack that should be displayed
     */
    public abstract ItemStack getCreativeTabItemStack();

    /**
     * the creative tab for this module
     * @return the creative tab
     */
    public PCCreativeTab getCreativeTab() {
        return this.creativeTab;
    }

    @Override
    public void onResourceReload() {
        getMetadata().description = PCLangHelper.translate("desk."+this.mod.getName());
    }

    public PCVersion getVersion(){
        return this.version;
    }

}
